import 'dart:convert';
import 'package:flutter/material.dart';
import 'services/firebase_service.dart';
import 'services/auth_service.dart';
import 'models/service.dart';
import 'models/cart_item.dart';
import 'models/offer.dart';
import 'cartscreen.dart';

class ServicesByCategoryScreen extends StatefulWidget {
  final String categoryName;
  final String categoryId;
  final Offer? preAppliedOffer;

  const ServicesByCategoryScreen({
    Key? key,
    required this.categoryName,
    required this.categoryId,
    this.preAppliedOffer,
  }) : super(key: key);

  @override
  State<ServicesByCategoryScreen> createState() => _ServicesByCategoryScreenState();
}

class _ServicesByCategoryScreenState extends State<ServicesByCategoryScreen> {
  List<Service> services = [];
  bool isLoading = true;
  String? error;
  Map<String?, int> selectedServices = {}; // serviceId -> quantity
  double totalPrice = 0.0;
  int totalItems = 0;
  final AuthService _authService = AuthService();

  @override
  void initState() {
    super.initState();
    print('DEBUG: ServicesByCategoryScreen - categoryName: "${widget.categoryName}"');
    print('DEBUG: ServicesByCategoryScreen - categoryId: "${widget.categoryId}"');
    _loadServices();
  }

  Future<void> _loadServices() async {
    try {
      setState(() {
        isLoading = true;
        error = null;
      });
      
      final fetchedServices = await FirebaseService.getServicesByCategory(widget.categoryName);
      
      setState(() {
        services = fetchedServices.where((service) => service.isActive).toList();
        isLoading = false;
      });
    } catch (e) {
      setState(() {
        error = 'Failed to load services: $e';
        isLoading = false;
      });
    }
  }

  void _addToSelection(Service service) {
    setState(() {
      if (selectedServices.containsKey(service.id)) {
        selectedServices[service.id] = selectedServices[service.id]! + 1;
      } else {
        selectedServices[service.id] = 1;
      }
      _updateTotals();
    });
  }

  void _removeFromSelection(Service service) {
    setState(() {
      if (selectedServices.containsKey(service.id)) {
        if (selectedServices[service.id]! > 1) {
          selectedServices[service.id] = selectedServices[service.id]! - 1;
        } else {
          selectedServices.remove(service.id);
        }
        _updateTotals();
      }
    });
  }

  void _updateTotals() {
    totalPrice = 0.0;
    totalItems = 0;
    
    for (String? serviceId in selectedServices.keys) {
      if (serviceId != null) {
        final service = services.firstWhere((s) => s.id == serviceId);
        final quantity = selectedServices[serviceId]!;
        totalPrice += service.price * quantity;
        totalItems += quantity;
      }
    }
  }

  Future<void> _proceedToCart() async {
    if (selectedServices.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Please select at least one service'),
          backgroundColor: Color(0xFFFF8F8F),
        ),
      );
      return;
    }
    
    try {
      // Get current user ID
      final currentUser = _authService.currentUser;
      if (currentUser == null) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Please log in to add items to cart'),
            backgroundColor: Colors.red,
          ),
        );
        return;
      }
      final currentUserId = currentUser.uid;
      
      // Save selected services to Firebase cart
      for (String? serviceId in selectedServices.keys) {
        if (serviceId != null) {
          final service = services.firstWhere((s) => s.id == serviceId);
          final quantity = selectedServices[serviceId]!;
          
          print('DEBUG: Creating CartItem with category: "${widget.categoryName}"');
          final cartItem = CartItem(
            id: '', // Will be generated by Firebase
            serviceId: service.id!,
            serviceName: service.name,
            category: widget.categoryName,
            duration: service.duration,
            price: service.price,
            description: service.description,
            imageBase64: service.imageBase64,
            quantity: quantity,
            userId: currentUserId,
            createdAt: DateTime.now(),
            updatedAt: DateTime.now(),
          );
          print('DEBUG: CartItem created with category: "${cartItem.category}"');
          
          await FirebaseService.addToCart(cartItem);
        }
      }
      
      // Show success message
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Added $totalItems items to cart (AED ${totalPrice.toStringAsFixed(0)})'),
          backgroundColor: const Color(0xFFFF8F8F),
        ),
      );
      
      // Navigate to cart screen
      Navigator.push(
        context,
        MaterialPageRoute(
          builder: (context) => const CartScreen(),
        ),
      );
      
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Failed to add items to cart: $e'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  Widget _buildServiceImage(String? imageBase64) {
  const double imageSize = 80.0;

  if (imageBase64 != null && imageBase64.isNotEmpty) {
    try {
      String base64String;
      if (imageBase64.startsWith('data:image/')) {
        base64String = imageBase64.split(',')[1];
      } else {
        base64String = imageBase64;
      }

      final bytes = base64Decode(base64String);
      return ClipOval(
        child: Image.memory(
          bytes,
          width: imageSize,
          height: imageSize,
          fit: BoxFit.cover,
          errorBuilder: (context, error, stackTrace) {
            return _buildFallbackImage();
          },
        ),
      );
    } catch (e) {
      return _buildFallbackImage();
    }
  } else {
    return _buildFallbackImage();
  }
}

Widget _buildFallbackImage() {
  const double imageSize = 80.0;
  
  return Container(
    width: imageSize,
    height: imageSize,
    decoration: BoxDecoration(
      shape: BoxShape.circle,
      color: const Color(0xFFFFB3BA).withOpacity(0.3),
    ),
    child: const Icon(
      Icons.spa,
      color: Color(0xFFFF8F8F),
      size: 40,
    ),
  );
}

  Widget _buildServiceCard(Service service) {
    final isSelected = selectedServices.containsKey(service.id);
    final quantity = selectedServices[service.id] ?? 0;
    
    return Card(
      margin: const EdgeInsets.all(4),
      elevation: 2,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12),
      ),
      child: Container(
        padding: const EdgeInsets.all(12),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            Expanded(
              flex: 3,
              child: _buildServiceImage(service.imageBase64),
            ),
            const SizedBox(height: 8),
            Expanded(
              flex: 2,
              child: Column(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Text(
                    service.name,
                    style: const TextStyle(
                      fontSize: 14,
                      fontWeight: FontWeight.w600,
                      color: Colors.black87,
                    ),
                    textAlign: TextAlign.center,
                    maxLines: 2,
                    overflow: TextOverflow.ellipsis,
                  ),
                  Text(
                    '${service.duration} mins',
                    style: TextStyle(
                      fontSize: 11,
                      color: Colors.grey[600],
                    ),
                  ),
                ],
              ),
            ),
            const SizedBox(height: 4),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text(
                  'AED${service.price.toStringAsFixed(0)}',
                  style: const TextStyle(
                    fontSize: 14,
                    fontWeight: FontWeight.bold,
                    color: Color(0xFFFF8F8F),
                  ),
                ),
                Row(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    if (isSelected) ...[
                      GestureDetector(
                        onTap: () => _removeFromSelection(service),
                        child: Container(
                          width: 24,
                          height: 24,
                          decoration: const BoxDecoration(
                            shape: BoxShape.circle,
                            color: Color(0xFFFF8F8F),
                          ),
                          child: const Icon(
                            Icons.remove,
                            color: Colors.white,
                            size: 16,
                          ),
                        ),
                      ),
                      const SizedBox(width: 8),
                      Text(
                        quantity.toString(),
                        style: const TextStyle(
                          fontSize: 14,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      const SizedBox(width: 8),
                    ],
                    GestureDetector(
                      onTap: () => _addToSelection(service),
                      child: Container(
                        width: 24,
                        height: 24,
                        decoration: const BoxDecoration(
                          shape: BoxShape.circle,
                          color: Color(0xFFFF8F8F),
                        ),
                        child: const Icon(
                          Icons.add,
                          color: Colors.white,
                          size: 16,
                        ),
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(
          widget.categoryName,
          style: const TextStyle(
            color: Colors.white,
            fontWeight: FontWeight.bold,
          ),
        ),
        backgroundColor: const Color(0xFFFF8F8F),
        iconTheme: const IconThemeData(color: Colors.white),
        elevation: 0,
      ),
      body: Column(
        children: [
          // Pre-applied offer display
          if (widget.preAppliedOffer != null)
            Container(
              margin: const EdgeInsets.all(16),
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                gradient: const LinearGradient(
                  colors: [Color(0xFFFF8F8F), Color(0xFFFFB3BA)],
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                ),
                borderRadius: BorderRadius.circular(12),
                boxShadow: [
                  BoxShadow(
                    color: Colors.black.withOpacity(0.1),
                    blurRadius: 8,
                    offset: const Offset(0, 2),
                  ),
                ],
              ),
              child: Row(
                children: [
                  const Icon(
                    Icons.local_offer,
                    color: Colors.white,
                    size: 24,
                  ),
                  const SizedBox(width: 12),
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          widget.preAppliedOffer!.title,
                          style: const TextStyle(
                            color: Colors.white,
                            fontSize: 16,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        if (widget.preAppliedOffer!.description.isNotEmpty)
                          Text(
                            widget.preAppliedOffer!.description,
                            style: const TextStyle(
                              color: Colors.white,
                              fontSize: 12,
                            ),
                          ),
                        const SizedBox(height: 4),
                        Text(
                          widget.preAppliedOffer!.discountType == 'percentage'
                              ? '${widget.preAppliedOffer!.discountValue.toStringAsFixed(0)}% OFF'
                              : 'AED ${widget.preAppliedOffer!.discountValue.toStringAsFixed(0)} OFF',
                          style: const TextStyle(
                            color: Colors.white,
                            fontSize: 14,
                            fontWeight: FontWeight.w600,
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          Expanded(
            child: isLoading
                ? const Center(
                    child: CircularProgressIndicator(
                      color: Color(0xFFFF8F8F),
                    ),
                  )
                : error != null
                    ? Center(
                        child: Padding(
                          padding: const EdgeInsets.all(16.0),
                          child: Column(
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: [
                              Icon(
                                Icons.error_outline,
                                size: 64,
                                color: Colors.grey[400],
                              ),
                              const SizedBox(height: 16),
                              Text(
                                error!,
                                style: const TextStyle(
                                  color: Colors.red,
                                  fontSize: 16,
                                ),
                                textAlign: TextAlign.center,
                              ),
                              const SizedBox(height: 16),
                              ElevatedButton(
                                onPressed: _loadServices,
                                style: ElevatedButton.styleFrom(
                                  backgroundColor: const Color(0xFFFF8F8F),
                                ),
                                child: const Text(
                                  'Retry',
                                  style: TextStyle(color: Colors.white),
                                ),
                              ),
                            ],
                          ),
                        ),
                      )
                    : services.isEmpty
                        ? Center(
                            child: Padding(
                              padding: const EdgeInsets.all(16.0),
                              child: Column(
                                mainAxisAlignment: MainAxisAlignment.center,
                                children: [
                                  Icon(
                                    Icons.spa_outlined,
                                    size: 64,
                                    color: Colors.grey[400],
                                  ),
                                  const SizedBox(height: 16),
                                  Text(
                                    'No services available in ${widget.categoryName}',
                                    style: TextStyle(
                                      color: Colors.grey[600],
                                      fontSize: 16,
                                    ),
                                    textAlign: TextAlign.center,
                                  ),
                                  const SizedBox(height: 16),
                                  ElevatedButton(
                                    onPressed: _loadServices,
                                    style: ElevatedButton.styleFrom(
                                      backgroundColor: const Color(0xFFFF8F8F),
                                    ),
                                    child: const Text(
                                      'Refresh',
                                      style: TextStyle(color: Colors.white),
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          )
                        : RefreshIndicator(
                            onRefresh: _loadServices,
                            color: const Color(0xFFFF8F8F),
                            child: Padding(
                              padding: const EdgeInsets.all(8.0),
                              child: GridView.builder(
                                gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                                  crossAxisCount: 2,
                                  childAspectRatio: 0.65,
                                  crossAxisSpacing: 8,
                                  mainAxisSpacing: 8,
                                ),
                                itemCount: services.length,
                                itemBuilder: (context, index) {
                                  return _buildServiceCard(services[index]);
                                },
                              ),
                            ),
                          ),
          ),
          if (totalItems > 0)
            Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.white,
                boxShadow: [
                  BoxShadow(
                    color: Colors.black.withOpacity(0.1),
                    blurRadius: 10,
                    offset: const Offset(0, -2),
                  ),
                ],
              ),
              child: SafeArea(
                child: SizedBox(
                  width: double.infinity,
                  child: ElevatedButton(
                    onPressed: _proceedToCart,
                    style: ElevatedButton.styleFrom(
                      backgroundColor: const Color(0xFFFF8F8F),
                      padding: const EdgeInsets.symmetric(vertical: 16),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                    ),
                    child: Text(
                      'Add to Cart ($totalItems items) - AED ${totalPrice.toStringAsFixed(0)}',
                      style: const TextStyle(
                        color: Colors.white,
                        fontSize: 16,
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                  ),
                ),
              ),
            ),
        ],
      ),
    );
  }
}